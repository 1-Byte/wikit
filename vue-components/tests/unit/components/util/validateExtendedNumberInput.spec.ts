import { parseExtendedNumber, validateExtendedNumberInput } from '@/components/util/validateExtendedNumberInput';

describe( 'validateExtendedNumberInput', () => {

	describe( 'valid', () => {
		it.each( [
			[ '0', 0, null ],
			[ '0.0', 0, null ],
			[ '42', 42, null ],
			[ '.12345', 0.12345, null ],
			[ '3.14156', 3.14156, null ],
			[ '-12345', -12345, null ],
			[ '+12345', 12345, null ],
			[ '1e6', 1000000, null ],
			[ '+1e6', 1000000, null ],
			[ '-1e6', -1000000, null ],
			[ '-1e6+-10', -1000000, 10 ],
			[ '-1e6±10', -1000000, 10 ],
			[ '1E6', 1000000, null ],
			[ '+1E6', 1000000, null ],
			[ '-1E6', -1000000, null ],
			[ '-1E6+-10', -1000000, 10 ],
			[ '-1E6±10', -1000000, 10 ],
			[ '1E-6', 0.000001, null ],
			[ '+1E-6', 0.000001, null ],
			[ '-1E-6', -0.000001, null ],
			[ '-1E-6+-10', -0.000001, 10 ],
			[ '-1E-6±10', -0.000001, 10 ],
			[ '1e-6', 0.000001, null ],
			[ '+1e-6', 0.000001, null ],
			[ '-1e-6', -0.000001, null ],
			[ '-1e-6+-10', -0.000001, 10 ],
			[ '-1e-6±10', -0.000001, 10 ],
			[ '+1e6±10', 1000000, 10 ],
			[ '1e6+-10e3', 1000000, 10000 ],
			[ '1e6±10.4', 1000000, 10.4 ],
			[ '1+-10', 1, 10 ],
			[ '1±10', 1, 10 ],
			[ '-12345!', -12345, 0 ],
			[ '-12345~', -12345, 0.5 ],
			[ '+12345!', 12345, 0 ],
			[ '+12345~', 12345, 0.5 ],
			[ '5.3 +/- 0.2', 5.3, 0.2 ],
			// negative
			[ '5.3 +/- -0.2', +5.3, 0.2 ],
			[ '5.3+--0.2', 5.3, 0.2 ],
			[ '5.3 ±-0.2', 5.3, 0.2 ],
		] )( 'when the input is \'%s\'', ( text, expectedNumber, expectedPrecision ) => {
			// expect( validateExtendedNumberInput( text ) ).toBe( true );
			const { number, precision } = parseExtendedNumber( text );
			expect( number ).toBe( expectedNumber );
			expect( precision ).toBe( expectedPrecision );
		} );
	} );

	describe( 'invalid', () => {
		it.each( [
			[ '123.4.5' ],
			[ '.1234,5' ],
			[ '1/3' ],
			[ '12f345.56' ],
			[ 'abcde' ],
			[ '10m' ],
			[ '-1e6+-10$' ],
			[ '4%' ],
			[ '78=65' ],
			[ '(nice)' ],
			[ 'متن فارسی' ],
			[ '12,345.56' ],
			[ '-12,345.56' ],
			[ '+12,345.56' ],
			[ '-12,345±10!' ],
			[ '-12,345±10~' ],
			[ 'foo' ],
			[ '' ],
			[ '.' ],
			[ '+.' ],
			[ '-.' ],
			[ '--1' ],
			[ '++1' ],
			[ '1-' ],
			[ 'one' ],
			[ '0x20' ],
			[ '1+1' ],
			[ '1-1' ],
			[ '1.2.3' ],
			[ ',3,' ],
			[ '10,000' ],
			[ '10\'000' ],
			[ '2!!' ],
			[ '!2' ],
			[ '2!2' ],
			[ '2!~' ],
			[ '2~!' ],
			[ '2~~' ],
			[ '~2' ],
			[ '2~2' ],
			[ '2 -- 2' ],
			[ '2++2' ],
			[ '2+±2' ],
			[ '2-±2' ],
			[ '2()' ],
			[ '2*' ],
			[ '2x y' ],
			[ 'x 2 y' ],
			[ '100 003' ],
			[ '1 . 0' ],
		] )( "when the input is '%s'", ( text ) => {
			expect( validateExtendedNumberInput( text ) ).toBe( false );
		} );
	} );
} );
